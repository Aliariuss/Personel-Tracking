// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Personel.EFCore.DAL;

#nullable disable

namespace Personel.EFCore.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Personel.EFCore.Domain.Address", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressID"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PersonelDetailID")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Region")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AddressID");

                    b.HasIndex("PersonelDetailID");

                    b.ToTable("Addresses", (string)null);

                    b.HasData(
                        new
                        {
                            AddressID = 1,
                            City = "Istanbul",
                            Country = "Turkey",
                            PersonelDetailID = 1,
                            PostalCode = "34000",
                            Region = "Marmara"
                        },
                        new
                        {
                            AddressID = 2,
                            City = "Ankara",
                            Country = "Turkey",
                            PersonelDetailID = 2,
                            PostalCode = "06000",
                            Region = "Anadolu"
                        },
                        new
                        {
                            AddressID = 3,
                            City = "Izmir",
                            Country = "Turkey",
                            PersonelDetailID = 3,
                            PostalCode = "35000",
                            Region = "Ege"
                        },
                        new
                        {
                            AddressID = 4,
                            City = "Antalya",
                            Country = "Turkey",
                            PersonelDetailID = 4,
                            PostalCode = "07000",
                            Region = "Akdeniz"
                        },
                        new
                        {
                            AddressID = 5,
                            City = "Bursa",
                            Country = "Turkey",
                            PersonelDetailID = 5,
                            PostalCode = "16000",
                            Region = "Marmara"
                        });
                });

            modelBuilder.Entity("Personel.EFCore.Domain.Department", b =>
                {
                    b.Property<int>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentID"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("DepartmentID");

                    b.ToTable("Departments", (string)null);

                    b.HasData(
                        new
                        {
                            DepartmentID = 1,
                            DepartmentName = "Yazılım"
                        },
                        new
                        {
                            DepartmentID = 2,
                            DepartmentName = "İnsan Kaynakları"
                        },
                        new
                        {
                            DepartmentID = 3,
                            DepartmentName = "Yazar"
                        },
                        new
                        {
                            DepartmentID = 4,
                            DepartmentName = "Pazarlamacı"
                        });
                });

            modelBuilder.Entity("Personel.EFCore.Domain.Gender", b =>
                {
                    b.Property<int>("GenderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenderID"));

                    b.Property<string>("GenderName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.HasKey("GenderID");

                    b.ToTable("Genders", (string)null);

                    b.HasData(
                        new
                        {
                            GenderID = 1,
                            GenderName = "Erkek",
                            State = false
                        },
                        new
                        {
                            GenderID = 2,
                            GenderName = "Kadın",
                            State = false
                        });
                });

            modelBuilder.Entity("Personel.EFCore.Domain.PersonelDetail", b =>
                {
                    b.Property<int>("PersonelDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonelDetailID"));

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PersonelID")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("PersonelDetailID");

                    b.HasIndex("PersonelID")
                        .IsUnique();

                    b.ToTable("PersonelDetails", (string)null);

                    b.HasData(
                        new
                        {
                            PersonelDetailID = 1,
                            Email = "ali.kilic@example.com",
                            PersonelID = 1,
                            Phone = "555-1234"
                        },
                        new
                        {
                            PersonelDetailID = 2,
                            Email = "ayse.yilmaz@example.com",
                            PersonelID = 2,
                            Phone = "555-5678"
                        },
                        new
                        {
                            PersonelDetailID = 3,
                            Email = "ahmet.demir@example.com",
                            PersonelID = 3,
                            Phone = "555-9101"
                        },
                        new
                        {
                            PersonelDetailID = 4,
                            Email = "fatma.ozturk@example.com",
                            PersonelID = 4,
                            Phone = "555-1122"
                        },
                        new
                        {
                            PersonelDetailID = 5,
                            Email = "mehmet.ak@example.com",
                            PersonelID = 5,
                            Phone = "555-1314"
                        });
                });

            modelBuilder.Entity("Personel.EFCore.Domain.Personels", b =>
                {
                    b.Property<int>("PersonelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonelID"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("GenderID")
                        .HasColumnType("int");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PersonelID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("GenderID");

                    b.ToTable("Workers", (string)null);

                    b.HasData(
                        new
                        {
                            PersonelID = 1,
                            BirthDate = new DateTime(1985, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentID = 1,
                            FirstName = "Ali",
                            GenderID = 1,
                            IdentityNumber = "12345678901",
                            LastName = "Kılıç"
                        },
                        new
                        {
                            PersonelID = 2,
                            BirthDate = new DateTime(1990, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentID = 2,
                            FirstName = "Ayşe",
                            GenderID = 2,
                            IdentityNumber = "12345678902",
                            LastName = "Yılmaz"
                        },
                        new
                        {
                            PersonelID = 3,
                            BirthDate = new DateTime(1995, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentID = 3,
                            FirstName = "Ahmet",
                            GenderID = 1,
                            IdentityNumber = "12345678903",
                            LastName = "Demir"
                        },
                        new
                        {
                            PersonelID = 4,
                            BirthDate = new DateTime(1988, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentID = 4,
                            FirstName = "Fatma",
                            GenderID = 2,
                            IdentityNumber = "12345678904",
                            LastName = "Öztürk"
                        },
                        new
                        {
                            PersonelID = 5,
                            BirthDate = new DateTime(1983, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartmentID = 1,
                            FirstName = "Mehmet",
                            GenderID = 1,
                            IdentityNumber = "12345678905",
                            LastName = "Ak"
                        });
                });

            modelBuilder.Entity("Personel.EFCore.Domain.Address", b =>
                {
                    b.HasOne("Personel.EFCore.Domain.PersonelDetail", "PersonelDetail")
                        .WithMany("Addresses")
                        .HasForeignKey("PersonelDetailID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonelDetail");
                });

            modelBuilder.Entity("Personel.EFCore.Domain.PersonelDetail", b =>
                {
                    b.HasOne("Personel.EFCore.Domain.Personels", "Personel")
                        .WithOne("PersonelDetail")
                        .HasForeignKey("Personel.EFCore.Domain.PersonelDetail", "PersonelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Personel");
                });

            modelBuilder.Entity("Personel.EFCore.Domain.Personels", b =>
                {
                    b.HasOne("Personel.EFCore.Domain.Department", "Department")
                        .WithMany("Personels")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Personel.EFCore.Domain.Gender", "Gender")
                        .WithMany("Personels")
                        .HasForeignKey("GenderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("Personel.EFCore.Domain.Department", b =>
                {
                    b.Navigation("Personels");
                });

            modelBuilder.Entity("Personel.EFCore.Domain.Gender", b =>
                {
                    b.Navigation("Personels");
                });

            modelBuilder.Entity("Personel.EFCore.Domain.PersonelDetail", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Personel.EFCore.Domain.Personels", b =>
                {
                    b.Navigation("PersonelDetail")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
